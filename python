# from http://pycon.blip.tv/file/3261277
winpdb - debug
code.interact - import code; code.interact(local=locals())
pdb - import pdb; pdb.set_trace()
ipython -
 from IPython.shell import IPShellEmbed
 shell = IPShellEmbed()
 shell()
pycharm - django avare ide
scrape.py - parse html file http://scrapy.org/
paramiko - ssh connections
lxml - libxml2 and libxslt
mechanize - Stateful programmatic web browsing, browser taklitcisi




http://docs.python.org/library/subprocess.html#subprocess-replacements
import subprocess
from subprocessimport call, PIPE, STDOUT
retcode = call(["ls", "-l"])
output = subprocess.check_output(["/bin/ls", stderr=STDOUT) # in version 2.7

--------------------------------------------------------------------------------

sh: output=`mycmd myarg`
==>
output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]

--------------------------------------------------------------------------------

sh: output=`dmesg | grep hda`
==>
p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]

--------------------------------------------------------------------------------

sts = os.system("mycmd" + " myarg")
==>
p = Popen("mycmd" + " myarg", shell=True)
sts = os.waitpid(p.pid, 0)[1]

--------------------------------------------------------------------------------

(child_stdout, child_stdin) = popen2.popen2("somestring", bufsize, mode)
==>
p = Popen(["somestring"], shell=True, bufsize=bufsize, stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

--------------------------------------------------------------------------------

pid = os.spawnlp(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg")
==>
pid = Popen(["/bin/mycmd", "myarg"]).pid

--------------------------------------------------------------------------------

retcode = os.spawnlp(os.P_WAIT, "/bin/mycmd", "mycmd", "myarg")
==>
retcode = call(["/bin/mycmd", "myarg"])

--------------------------------------------------------------------------------

s.spawnvp(os.P_NOWAIT, path, args)
==>
Popen([path] + args[1:])

--------------------------------------------------------------------------------

os.spawnlpe(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg", env)
==>
Popen(["/bin/mycmd", "myarg"], env={"PATH": "/usr/bin"})

--------------------------------------------------------------------------------

pipe = os.popen("cmd", 'r', bufsize)
==>
pipe = Popen("cmd", shell=True, bufsize=bufsize, stdout=PIPE).stdout

--------------------------------------------------------------------------------

pipe = os.popen("cmd", 'w', bufsize)
==>
pipe = Popen("cmd", shell=True, bufsize=bufsize, stdin=PIPE).stdin

--------------------------------------------------------------------------------

(child_stdin, child_stdout) = os.popen2("cmd", mode, bufsize)
==>
p = Popen("cmd", shell=True, bufsize=bufsize, stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdin, child_stdout) = (p.stdin, p.stdout)

--------------------------------------------------------------------------------

(child_stdin, child_stdout, child_stderr) = os.popen3("cmd", mode, bufsize)
==>
p = Popen("cmd", shell=True, bufsize=bufsize, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
(child_stdin, child_stdout, child_stderr) = (p.stdin, p.stdout, p.stderr)

--------------------------------------------------------------------------------

(child_stdin, child_stdout_and_stderr) = os.popen4("cmd", mode, bufsize)
==>
p = Popen("cmd", shell=True, bufsize=bufsize, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)

--------------------------------------------------------------------------------

(child_stdin, child_stdout) = os.popen2(["/bin/ls", "-l"], mode, bufsize)
==>
p = Popen(["/bin/ls", "-l"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)
(child_stdin, child_stdout) = (p.stdin, p.stdout)

--------------------------------------------------------------------------------

(child_stdout, child_stdin) = popen2.popen2("somestring", bufsize, mode)
==>
p = Popen(["somestring"], shell=True, bufsize=bufsize, stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

--------------------------------------------------------------------------------





import logging, logging.handlers
logger = logging.getLogger("a_name")
hdlr = logging.handlers.SysLogHandler(
facility=logging.handlers.SysLogHandler.LOG_DAEMON)
formatter = logging.Formatter('%(filename)s: %(levelname)s: %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)



import logging
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(levelname)s %(message)s',
                    filename='/tmp/myapp.log',
                    filemode='w')
logging.debug('A debug message')
logging.info('Some information')
logging.warning('A shot across the bows')



import os
path = os.path.abspath(__file__)
dir_path = os.path.dirname(path)



memory profling
===============
# from http://stackoverflow.com/questions/552744/how-do-i-profile-memory-usage-in-python
>>> from guppy import hpy; h=hpy()
>>> h.heap()
Partition of a set of 48477 objects. Total size = 3265516 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0  25773  53  1612820  49   1612820  49 str
     1  11699  24   483960  15   2096780  64 tuple
     2    174   0   241584   7   2338364  72 dict of module
     3   3478   7   222592   7   2560956  78 types.CodeType
     4   3296   7   184576   6   2745532  84 function
     5    401   1   175112   5   2920644  89 dict of class
     6    108   0    81888   3   3002532  92 dict (no owner)
     7    114   0    79632   2   3082164  94 dict of type
     8    117   0    51336   2   3133500  96 type
     9    667   1    24012   1   3157512  97 __builtin__.wrapper_descriptor
<76 more rows. Type e.g. '_.more' to view.>
>>> h.iso(1,[],{})
Partition of a set of 3 objects. Total size = 176 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1  33      136  77       136  77 dict (no owner)
     1      1  33       28  16       164  93 list
     2      1  33       12   7       176 100 int
>>> x=[]
>>> h.iso(x).sp
 0: h.Root.i0_modules['__main__'].__dict__['x']
>>>




bekir@ltsp222:/tmp$ ipython hede hodo -i dosya
In [1]: from optparse import OptionParser
In [2]: parser = OptionParser(usage="%prog -i FILE")
In [3]: parser.add_option('-i', '--ini', dest='ini',help='Configuration file to user',metavar='FILE', default=None)
Out[3]: <Option at 0x2a0c8c0: -i/--ini>

In [4]: (options, args) = parser.parse_args()

In [5]: args
Out[5]: ['hodo']

In [6]: options.ini
Out[6]: 'dosya'

In [7]: parser.print_help()
Usage: hede -i FILE

Options:
  -h, --help           show this help message and exit
  -i FILE, --ini=FILE  Configuration file to user

In [8]: 

Summary:
from optparse import OptionParser
parser = OptionParser(usage="%prog -i FILE")
parser.add_option('-i', '--ini', dest='ini',help='Configuration file to user',metavar='FILE', default=None)
(options, args) = parser.parse_args()
options.ini
parser.print_help()


