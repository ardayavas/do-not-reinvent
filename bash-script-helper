#!/bin/bash

set +e # set -o errexit # exit on errors, we dont need this, because
       # we explicitly set an ERR trap with calling exit.

set -u # set -o nounset # exit if trying to use an uninitialized
       # variable

set -E # set -o errtrace # inherit ERR trap in subshells

set -T # set -o functrace # inherit DEBUG and RETURN traps on
       # subshells

# set -C # set -o noclobber # error if a file redirection will
         # override a file

# set -o pipefail # dont return last commands status in a pipe

#TODO: think about implemting libbash
#TODO: default arg parser as in python getargs
#TODO: default exit codes
#TODO: default behaviour in cron, redirect &1 &2

# write_msg - msg - print_msg
# write_log - log

# discrete log and msg
# add file:function:line in each line in log "${BASH_SOURCE[1]##*/}:${FUNCNAME[1]}:${BASH_LINENO[0]}"

BASENAME=${0##*/}
BASEDIR=$( cd $(dirname $0); pwd -P )

# == INITIALIZE CONFIG PARAMETERS AND  ==

##TODO: mail address to send mail on fatal errors, default empty (disabled)
##MAIL_ON_ERROR=

OUTPUT_LEVEL=${OUTPUT_LEVEL:-INFO}
LOG_LEVEL=${LOG_LEVEL:-DEBUG}

#TODO: Implementing log4sh should be good
LOG_FILE=${LOG_FILE:-default}
if [ "$LOG_FILE" = "default" ]; then
    LOG_FILE=$BASEDIR/$BASENAME.log
elif [ "${LOG_FILE:0:1}" != "/" ]; then
    LOG_FILE=$BASEDIR/$LOGFILE
fi

LOG_SYSLOG_FACILITY=${LOG_SYSLOG_FACILITY:-user}


# == helper functions ==

# Save initial std*
STDIN=63
STDOUT=62
STDERR=61
eval "exec $STDIN<&0"
eval "exec $STDOUT>&1"
eval "exec $STDERR>&2"

READ_FIRST_LINE_FD=60
function read_first_line {
    local file=$1
    eval "exec $READ_FIRST_LINE_FD<$file"
    read -ru $READ_FIRST_LINE_FD
    eval "exec $READ_FIRST_LINE_FD<&-"
    echo $REPLY
}

# from http://stackoverflow.com/questions/2264428/converting-string-to-lower-case-in-bash-shell-scripting
UPPERS=ABCDEFGHIJKLMNOPQRSTUVWXYZ
LOWERS=abcdefghijklmnopqrstuvwxyz
function lc { #usage: lc "SOME STRING" -> "some string"
    local i=0
    local OUTPUT=
    while ([ $i -lt ${#1} ]); do
        CUR=${1:$i:1}
        case $UPPERS in
        *$CUR*)
            CUR=${UPPERS%$CUR*}
            OUTPUT="${OUTPUT}${LOWERS:${#CUR}:1}"
            ;;
        *)
            OUTPUT="${OUTPUT}$CUR"
            ;;
        esac
        i=$((i+1))
    done
    echo "${OUTPUT}"
}

function uc { #usage: uc "some string" -> "SOME STRING"
    local i=0
    local OUTPUT=
    while ([ $i -lt ${#1} ]); do
        CUR=${1:$i:1}
        case $LOWERS in
        *$CUR*)
            CUR=${LOWERS%$CUR*}
            OUTPUT="${OUTPUT}${UPPERS:${#CUR}:1}"
            ;;
        *)
            OUTPUT="${OUTPUT}$CUR"
            ;;
        esac
        i=$((i+1))
    done
    echo "${OUTPUT}"
}

function has_terminal {
    test -t 1
}

function is_interactive {
    test -n "${-//[^i]/}"
}

if is_interactive; then
    unset -f command_not_found_handle
    PS1='[skel:$SHLVL]'"$PS1"
fi

function is_running_via_termless_ssh {
    test -n "$SSH_CLIENT" -a -z "$SSH_TTY"
}

function is_running_via_cron {
    # from http://unix.stackexchange.com/questions/46789/check-if-script-is-started-by-cron-rather-than-invoked-manually
    local P_PID=$$  # start from current PID
    local CRON_IS_PARENT=0
    local CRONPID=$(ps ho %p -C cron)
    while [ $CRON_IS_PARENT -ne 1 ] && [ $P_PID -ne 1 ] ; do
        P_PID=$(ps ho %P -p $P_PID)
        [ $CRONPID -eq $P_PID ] && CRON_IS_PARENT=1
    done
    [ $CRONPID -eq 1 ]
}

function is_stdin_a_file {
    test "$(stat --print=%F --dereference /dev/fd/0 2>/dev/null)" = "regular file"
}

function is_stdout_a_file {
    test "$(stat --print=%F --dereference /dev/fd/1 2>/dev/null)" = "regular file"
}

function is_stdin_a_pipe {
    test "$(stat --print=%F --dereference /dev/fd/0 2>/dev/null)" = "fifo"
}

function is_stdout_a_pipe {
    test "$(stat --print=%F --dereference /dev/fd/1 2>/dev/null)" = "fifo"
}

function is_stdin_a_terminal {
    test -t 0
}

function is_stdout_a_terminal {
    test -t 1
}

# == LOCK MECHANISM ==
# A pure bash lock implementation

function clean_unowned_locks {
    local pid
    local piddir
    local lock_name
    mkdir -p /var/lock/$BASENAME/
    for piddir in /var/lock/$BASENAME/*/*; do
        pid=${piddir##*/}
        lock_name=${piddir%/*}
        lock_name=${lock_name##*/}
        test "$pid" = "*" && continue
        if ! [ -d /proc/$pid ]; then
            rmdir $piddir &>/dev/null
            rmdir /var/lock/$BASENAME/$lock_name &>/dev/null
        fi
    done
}
clean_unowned_locks

function lock {
    local lock_name=${1:-INTERNAL_GLOBAL}
    debug "Locking '$lock_name'..."
    if mkdir /var/lock/$BASENAME/$lock_name &>/dev/null; then
        mkdir -p /var/lock/$BASENAME/$lock_name/$$ &>/dev/null
        debug "Locked '$lock_name'."
        return 0
    fi
    debug "Alredy locked '$lock_name'."
    return 1
}

function unlock {
    local lock_name=${1:-INTERNAL_GLOBAL}
    debug "Unlocking '$lock_name'..."
    if rmdir /var/lock/$BASENAME/$lock_name/$$ &>/dev/null; then
        rmdir /var/lock/$BASENAME/$lock_name &>/dev/null
        debug "Unlocked '$lock_name'."
        return 0
    fi
    debug "Not locked '$lock_name'."
    return 1
}

function locks {
    local lock_name
    local lockdir
    mkdir -p /var/lock/$BASENAME/
    for lockdir in /var/lock/$BASENAME/*/$$; do
        lock_name=${lockdir%/*}
        lock_name=${lock_name##*/}
        test "$lock_name" = "*"  && continue
        echo "$lock_name"
    done
}

function unlock_all {
    debug "Removing all locks..."
    rm -rf /var/lock/$BASENAME/$$/
}

# cleanup leftovers if script fails
function internal_clean_up {
    #TODO: wait for childs
    unlock_all
}

# == SIGNAL FUNCTIONS ==

#TODO: there should be debug (set -x, stepping: trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG)

# Predefined handlers, users shoud create their own onerror, onquit
# oninterrupt handlers

# User pressed Ctrl-C to abort the script
# SIGINT (3)
function int_handler {
    error "^C\nAborted (Ctrl-c) by user on line $1 in $BASENAME."
    print_stack
    if type -t oninterrupt &>/dev/null; then
        oninterrupt
    fi
    kill -SIGINT $$ # Propagate signal
    if is_interactive; then
        return
    fi
    exit 130 # Default SIGINT status code is 130
}
trap 'int_handler $LINENO' INT

# Runs on any kind of exit even if called from an interrupt handler
# EXIT
function exit_handler {
    debug "Starting exit handler..."
    internal_clean_up
    if type -t onexit &>/dev/null; then
        onexit
    fi
    debug "End of exit handler..."
}
trap 'exit_handler' EXIT

# Handle HUP signal
# SIGHUP (1)
function hup_handler {
    debug "Got HUP signal..."
    if has_terminal; then
        # Terminal has closed by user or line hangup detected (for
        # example a disconnection because of network)
        error "Got HUP signal!"
        if type -t onhup &>/dev/null; then
            onhup
        fi
        exit 1
    fi
    # If we have no terminal and got HUP signal, then this script
    # should be some kind of daemon, and user want it to re read
    # configuration files.
    if type -t onhup &>/dev/null; then
        onhup
    fi
}
trap 'hup_handler' HUP

# Handle uncaught errors
# SIGERR
function err_handler {
    error "Fired an error on line $1."
    print_stack
    if type -t onerr &>/dev/null; then
        onerr
    fi
    exit 1
}
trap 'err_handler $LINENO' ERR

# Handle default kill signal
# SIGTERM (15)
function term_handler {
    error "Got term signal on line $1"
    print_stack
    if type -t onterm &>/dev/null; then
        onterm
    fi
    exit 1
}
trap 'term_handler' TERM

# SIGQUIT
function quit_handler {
    debug "Got term signal on line $1"
    if type -t onquit &>/dev/null; then
        onquit
    fi
    exit 1
}
trap 'quit_handler' QUIT

# == OUTPUT FUNCTIONS AND LOGGERS ==
function color_echo {
    for word in "$@"; do
        case "$word" in
            NORMAL|RESET) echo -n -e "\033[0;00m";;
            BLACK) echo -n -e "\033[22;30m";;
            RED|--ERROR|--ERR) echo -n -e "\033[22;31m";;
            GREEN|--INFO) echo -n -e "\033[22;32m";;
            YELLOW|--WARNING|--WARN) echo -n -e "\033[22;33m";;
            BLUE) echo -n -e "\033[22;34m";;
            MAGENTA) echo -n -e "\033[22;35m";;
            CYAN) echo -n -e "\033[22;36m";;
            GRAY|WHITE) echo -n -e "\033[22;37m";;
            LGRAY|DARKGRAY|BRIGHTBLACK|--DEBUG) echo -n -e "\033[01;30m";;
            LRED|LIGHTRED|BRIGHTRED|--FATAL) echo -n -e "\033[01;31m";;
            LGREEN|LIGHTGREEN|BRIGHTGREEN) echo -n -e "\033[01;32m";;
            LYELLOW|LIGHTYELLOW|BRIGHTYELLOW) echo -n -e "\033[01;33m";;
            LBLUE|LIGHTBLUE|BRIGHTBLUE) echo -n -e "\033[01;34m";;
            LMAGENTA|LIGHTMAGENTA|BRIGHTMAGENTA) echo -n -e "\033[01;35m";;
            LCYAN|LIGHTCYAN|BRIGHTCYAN) echo -n -e "\033[01;36m";;
            LWHITE|LIGHTWHITE|BRIGHTWHITE) echo -n -e "\033[01;37m";;
            *) echo -n "$word ";;
        esac
    done
    echo -e "\033[0;00m"
}

function echo_ {
    if is_running_via_cron; then
        return
    fi
    if ! is_stdout_a_terminal; then
        echo "$@"
        return
    fi
    color_echo "$@"
}

function log {
    if [ -z "$LOG_FILE" ]; then
        return
    fi
    local level=$1
    shift
    if [ "$LOG_FILE" == "syslog" ]; then
        logger -p "$LOG_SYSLOG_FACILITY":$(lc "$level")  -t "$BASENAME" "$@"
    fi
    printf "$(date '+%F %T') $BASENAME($$): $(uc "$level") $@\n" >> ${LOG_FILE}
}

function debug {
    local regex='^(DEBUG)$'
    [[ "$OUTPUT_LEVEL" =~ $regex ]] && echo_ --DEBUG "$@"
    [[ "$LOG_LEVEL" =~ $regex ]] && log DEBUG "$@"
    return 0
}

function info {
    local regex='^(DEBUG|INFO)$'
    [[ "$OUTPUT_LEVEL" =~ $regex ]] && echo_ --INFO "$@"
    [[ "$LOG_LEVEL" =~ $regex ]] && log INFO "$@"
    return 0
}

function warn {
    local regex='^(DEBUG|INFO|WARN)$'
    [[ "$OUTPUT_LEVEL" =~ $regex ]] && echo_ --WARN "$@"
    [[ "$LOG_LEVEL" =~ $regex ]] && log WARN "$@"
    return 0
}

function error {
    local regex='^(DEBUG|INFO|WARN|ERROR)$'
    [[ "$OUTPUT_LEVEL" =~ $regex ]] && echo_ --ERROR "$@"
    [[ "$LOG_LEVEL" =~ $regex ]] && log ERROR "$@"
    return 0
}

# == DEBUG FUNCTIONS ==

function start_time_debug {
    TMP_PS4="$PS4"
    PS4='+\t '
    set -xv
}

function stop_time_debug {
    set +xv
    PS4="$TMP_PS4"
}

# from http://blog.yjl.im/2012/01/printing-out-call-stack-in-bash.html
function print_line {
    local FILE=$1
    local LINE=$2
    local i=0
    while read fileline; do
        let i=i+1
        if [ "$i" -eq "$LINE" ]; then
            echo $fileline
            break
        fi
    done <$FILE
}

#TODO: see bashinator stack implementation
#TODO: see https://github.com/codigorama/bash-toolbox/blob/master/lib/base.sh for inspecting an alternative
function print_stack {
    if is_interactive; then
        return
    fi
    local i=0
    local FRAMES=${#BASH_LINENO[@]}
    # FRAMES-2 skips main, the last one in arrays
    for ((i=FRAMES-2; i>=1; i--)); do
        debug "  File \"${BASH_SOURCE[i+1]}\", line ${BASH_LINENO[i]}, in ${FUNCNAME[i+1]}"
        # Grab the source code of the line
        local LINE=$(print_line "${BASH_SOURCE[i+1]}" "${BASH_LINENO[i]}")
        debug "    $LINE"
    done
}

function print_stack_summary {
    if is_interactive; then
        return
    fi
    local i=0
    local FRAMES=${#BASH_LINENO[@]}
    local OUTPUT=
    # FRAMES-2 skips main, the last one in arrays
    for ((i=FRAMES-2; i>=0; i--)); do
        OUTPUT="$OUTPUT> ${FUNCNAME[i+1]} ${BASH_LINENO[i]}"
    done
    debug "$OUTPUT"
}
